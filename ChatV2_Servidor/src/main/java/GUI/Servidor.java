/*
 * Jesus Roberto Estrada Diaz
 * 17231071
 * Practica 2.3
 */
package GUI;

import java.awt.EventQueue;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import clases.PaqueteDatos;

public class Servidor extends javax.swing.JFrame implements Runnable {

    Thread miHilo;
    //constructor
    public Servidor() {
        initComponents();
        miHilo = new Thread(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            Servidor serv = new Servidor();
            
            @Override
            public void run() {
                serv.setVisible(true);
                serv.miHilo.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            //creamos un socket servidor para monitorear los mensajes
            // que lleguen al servidor y lo ligamos a un puerto (9999)
            ServerSocket socketServidor = new ServerSocket(9999);            
            // cremos un Paquete de datos para poder recibir datos
            PaqueteDatos paquete_recibido;            
            while (true) {
                // empezamos a esuchar el puerto por medio del socket
                try ( Socket socket_escucha = socketServidor.accept()) {                    
                    //creamos nuestro objeto de entrada para recibir datos
                    ObjectInputStream objeto_entrada
                            = new ObjectInputStream(socket_escucha.getInputStream());                    
                    //nuestro objeto de entrada lee el paquete que nos envían
                    paquete_recibido = (PaqueteDatos) objeto_entrada.readObject();                    
                    //nos ayudamos de variables cortas
                    String nick, mensaje, ip;
                    nick = paquete_recibido.getNickName();
                    mensaje = paquete_recibido.getMensaje();
                    ip = paquete_recibido.getIp();
                    //agregamos a nuestra area de texto los datos del paquete
                    txtArea.append(nick + ": " + mensaje + "--> " + ip + "\n");                    
                    // ---- Hasta aquí es como en cliente ----
                    // Ahora reenviamos el paquete de datos al otro cliente
                    // ObjectOutputStream objetoReenvio;
                    //ya que lo recibi ahora lo reenvio
                    try (//abrimos recursos
                            //creamos socket para reenvío
                            Socket destinatario = new Socket(ip, 9090);                            
                            //creamos nuestro objeto de salida a partir de
                            // nuestro socket destino
                            ObjectOutputStream objetoReenvio =
                                    new ObjectOutputStream(destinatario.getOutputStream())
                        )
                    {
                        //El objeto de salida escribe el objeto datos
                        objetoReenvio.writeObject(paquete_recibido);
                    }
                } catch (ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}
